CC = clang
BUILD_DIR ?= ./build
NAME = mahjong_agreg

RAYLIB_DIR ?= ./raylib/src/

# This allows the preprocessor to also generate the dependencies in the *.d files
CPPFLAGS += -MP -MD

CFLAGS = -Wall -Wextra -I$(RAYLIB_DIR)
LDFLAGS += -lm
DEBUGFLAGS = -O0 -g -fsanitize=address
# RELEASEFLAGS = -flto -O3 -DNDEBUG
RELEASEFLAGS = -O3 -DNDEBUG -fshort-enums

MODE ?= RELEASE# Default is Release

# Raylib has some warnings that we donâ€™t want to see when compiling in debug
CUSTOM_CFLAGS = -Wno-unused-result -Wno-unused-but-set-variable

# Allow usage of mold linker for faster build time, default to false
USE_MOLD_LINKER ?= FALSE
ifeq ($(USE_MOLD_LINKER), TRUE)
	LDFLAGS += -fuse-ld=mold
endif

ifeq ($(MODE),DEBUG)
	CFLAGS += $(DEBUGFLAGS)
	CUSTOM_CFLAGS += $(DEBUGFLAGS)
else
	CFLAGS += $(RELEASEFLAGS)
	CUSTOM_CFLAGS += $(RELEASEFLAGS)
endif

default: $(NAME)

# for raylib
RAYLIB_RELEASE_PATH = $(CURDIR)/$(BUILD_DIR)
LIBRAYLIB = $(BUILD_DIR)/libraylib.a
export CUSTOM_CFLAGS
export RAYLIB_RELEASE_PATH

SOURCES = $(shell find . -name '*.c' -not -path './test/*' -not -path './raylib/*')
OBJECTS = $(addprefix $(BUILD_DIR)/, $(SOURCES:%.c=%.o))
MAKEFILES = $(OBJECTS:%.o=%.d)

# We include the autogenerated dependencies
-include $(MAKEFILES)

$(NAME): $(OBJECTS) $(LIBRAYLIB)
	@echo "Compiling Mahjong $(SOURCES) $(OBJECTS) $(LIBRAYLIB)"
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^

$(BUILD_DIR)/%.o: %.c
	@mkdir -p $(BUILD_DIR)/$(dir $<)
	$(CC) $(CFLAGS) $(CPPFLAGS) -c -o $@ $<

raylib: $(LIBRAYLIB)

$(LIBRAYLIB):
	@mkdir -p $(BUILD_DIR)
	$(MAKE) -C $(RAYLIB_DIR)

TEST_SOURCE = $(wildcard test/*.c)
TEST_EXECUTABLE = $(TEST_SOURCE:test/%.c=build/%.x)

test: $(TEST_EXECUTABLE)
	@start_time=$$(date +%s); \
	number_test=0; \
	for binary in $(wildcard build/*.x); do \
		./$$binary 2>&1 ; \
		number_test=$$((number_test + 1)); \
	done; \
	end_time=$$(date +%s); \
	elapsed_time=$$((end_time - start_time)); \
	echo "$$number_test test took $$elapsed_time s"

build/%.x: test/%.c $(OBJECTS) $(LIBRAYLIB)
	$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $(word 1, $^) $(filter-out $(BUILD_DIR)/./controller/controller.o, $(OBJECTS)) $(LIBRAYLIB)

cleanall : clean clean_raylib

clean:
	$(RM) $(OBJECTS)
	$(RM) $(MAKEFILES)
	$(RM) $(LIBRAYLIB)
	$(RM) $(TEST_EXECUTABLE)
	$(RM) --dir $(shell find $(BUILD_DIR) -type d | sort --reverse)
	$(RM) $(NAME)

clean_raylib:
	$(MAKE) clean -C $(RAYLIB_DIR)

.PHONY: clean cleanall clean_raylib test
